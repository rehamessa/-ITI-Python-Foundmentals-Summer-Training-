# -*- coding: utf-8 -*-
"""lab6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zAfSifNEk2Flb9SDAUT4fzrsBxFK0YtW
"""



"""1. Write a Python program to get a string made of the first 2 
and the last 2 chars from a given a string. If the string length 
is less than 2, return instead the empty string
Input: itiaswan
Output: Itan
"""

def string(str):
  if len(str) < 2:
    return ''
  else:
    return str[0:2] + str[-2:]
s=input(" ")
print(string(s))

"""2. Write a Python program to get a string from a given string 
where all occurrences of its first char have been changed 
to '$', except the first char itself.
input : 'restart'
output : 'resta$t'
"""

def change(str1):
  char = str1[0]
  str1 = str1.replace(char, '$')
  str1 = char + str1[1:]

  return str1
s=input(" ")
print(change(s))

"""

> 3. Write a Python program to add 'ing' at the end of a given 
string (length should be at least 3). If the given string is 
already ends with 'ing' then add 'ly' instead. If the string 
length of the given string is less than 3, leave it unchanged.
input : 'abc'
output : 'abcing'
input : 'string'
output : 'stringly
"""

def add(str1):
  length = len(str1)

  if length > 2:
    if str1[-3:] == 'ing':
      str1 += 'ly'
    else:
      str1 += 'ing'

  return str1
s=input("")  

print(add(s))

"""4. You are given a string and your task is to swap cases. In 
other words, convert all lowercase letters to uppercase 
letters and vice versa.
Input: ass
Ouput: ASS

"""

def swap(s):

    t = []
    l = list(s)

    for i in l:
        j = ""
        if i.islower():
            j = i.upper()
        elif i.isupper():
            j = i.lower()
        else:
            t.append(i)
        t.append(j)
    
    r = ''.join(t)
    
    return r

s = input()
print(swap(s))

"""5. Given two strings, s1 and s2, create a new string by 
appending s2 in the middle of s1
Input s1: abcd
Input s2: xx
Output:abxxcd
"""

a=input("")
b=input(" ")
new_a=int(len(a)/2)
new=a[:new_a]+b+a[new_a:]
print(new)

"""6. Write a program that take two string s1,s2 and print yes if s1 
is exist in s2 and no other wise
Input s1:aa
Input s2:hhhaa
Output: yes

"""

s2 = input("")
s1 =input("")
if (s2.count(s1)>0):     
    print("YES") 
else: 
    print("NO")

"""7. Write a program to compare two strings lexicographically, 
Input s1:abc
Input s2:abd output s2 is > s1
"""

s1 = input(" ")
s2 =input(" ")
if s1 >s2:
  print(" s1 >s2")
else:
  print(" s1<s2")

"""
8. Add exception handling to the get_value() function so that it, 
if an IndexError exception occurs because the specified 
index does not exist, you have function have two parameter 
list and index make exception when index is out of boundary.

"""

def get_value(a,x):
  

  try:  
    print( a[x])
  except IndexError:  
      print ("Index Error Exception Raised, list index out of range")
  else:  
      print ("Success, no error!")
get_value(['a','b',"c"],4)

"""9. Add exception handling to the dived() function so that it, if an 
zeroerror exception occurs because dived number by 0 , you 
have function have two parameter number and make 
exception when dived number by 0

"""

def dived():

    a = float(input(""))
    b = float(input(""))
    return a, b


x, y = dived()


try:
    print(f"{x} / {y} is {x/y}")

except ZeroDivisionError:

    print("Cannot divide by zero")
    x, y = dived()

"""10. You are required to enter a word that consists 
of x and y that denote the number of Zs and Os respectively. 
The input word is considered similar to word zoo if (2*x=y).
Determine if the entered word is similar to word zoo.
For example, words such as zzoooo and zzzoooooo are 
similar to word zoo but not the words such 
as zzooo and zzzooooo.
Input: zzzoooooo
Output: yes
Input: zzoo
Output: n
"""

s=input("")
x=[]
y=[]
for i in range(len(s)):
  if s[i]=="z":
    x.append(s[i])
  elif s[i]=="o":
     y.append(s[i])
if 2*len(x)==len(y):
  print("yes")  
else:
  print("n")

